<p id="notice"><%= notice %></p>

<div class="hero-unit">
  <% if @ticket %>
    <h2> Take <%= @ticket.uid %> </h2>
  <% else %>
    <h2> Sem Visitas </h2>
  <% end %>
  <div class="container well">
    <b> Status do Visitante: </b> <span id="progress-display"> 00:00 </span>
  </div>
</div>

<div class="container well">

  <div class="form-horizontal">
    <div class="form-group">
      <div class="col-sm-2">
        &nbsp;
      </div>

      <div class="col-sm-4">

        <div id="video-container" class="rtccWebRTCControls" style="width:322px; height:182px; background:#ffffff; border: 1px solid #AAAAAA;">
          <%= image_tag("SightCall_Logo.png", size: "320x180", style: "position:absolute") %>
        </div>
      </div>
    </div>
  </div>

  <div class="form-horizontal">

    <!-- LAUNCH MEETING -->
    <div class="form-group">
      <label for="host_button" class="col-sm-2">Video Chamada:</label>

      <div class="col-sm-6">
        <button id="host_button" disabled class="rtccHostActive btn btn-primary btn-block" disabled onclick="inviteFriend('<%= @ticket && @ticket.uid %>')">Invite Visitor</button>
      </div>
    </div>

    <!-- MANAGE RECORDING -->
    <div class="form-group">
      <label for="recording_title" class="col-sm-2">Cloud Recording:</label>
      <div class="col-sm-6">
        <div class="input-group">
          <input id="recording_title" type="text" class="form-control" placeholder="Title (optional) ...">
          <span class="input-group-btn">
            <button id="recording_start_button" disabled class="rtccHostActive btn btn-primary" onclick="newRecording()" >Start</button>
          </span>
          <span class="input-group-btn">
            <button id="recording_stop_button" disabled class="rtccHostActive btn btn-primary" onclick="stopRecording()" >Stop</button>
          </span>
        </div>
      </div>
    </div>

    <!-- RECORDING STATUS DISPLAY -->
    <div class="form-group">
      <div class="col-sm-2">
        <span id="recording_counter" style="color:red"></span>
      </div>
      <div class="col-sm-6">
        <span id="recording_results"></span>
      </div>
    </div>

  </div>

</div>

<!-- CHAT WIDGET AREA -->

<div id="chatmessages" class="panel panel-default">
  (chat messages will appear here) <br>
  <br>
  <br>
  <br>
</div>
<form id="chatform" >
  <div class="input-group">
    <input id="chattext" type="text" class="form-control" placeholder="type here"/>
    <span class="input-group-btn"> <button type="submit" class="btn btn-default"> Enviar </button> </span>
  </div>
</form>

<div style="height:10px"></div>

<% if @ticket %>
  <div class="container well">
    <b>Visitor's User Agent: </b> <br>
    <%= @ticket.useragent %>
  </div>
<% end %>

<%= audio_tag("Click03.mp3", id: 'clicksound', autoplay: false, controls: false) %>

<script>
 var rtccAppId = "<%= RTCC_APP_ID %>";
 var rtcc = null;
 var rtccCall = null;

 var rtccCloudrecorderManager = null;
 var rtccRecording = null;
 var rtccRecordingCounter = null;

 var MPI = null;
 var progressManager = null;

 //
 // get token
 //

 function getToken(url, success, failure) {
   $.ajax({
     type: "POST",
     url: url,
     cache: false,
     dataType: "JSON"
   }).success(function(data) {
     console.log(["RtccToken Success", data]);
     success(data);
   }).error(function(e) {
     console.log(["RtccToken error", e]);
     failure(e);
   });
 }

//
// getToken, set it and authenticate (again)
//

 function setTokenAndAuthenticate(url) {
   getToken(
     url,
     function(resp) {
       var token = resp.data;
       rtcc.setToken(token);
       rtcc.authenticate(1);
     }, function(e) {
       // the default prints it already
     });
 }

 //
 // Functions for managing our little chat service
 //

 var messages = [ "<br>", "<br>", "<br>", "<br>" ];

 function appendsent(msg) {
   x = messages.shift()
   messages.push('<em>' + msg + '<em> <br>');
   $("#chatmessages").html(messages);
 }

 function appendreceived(msg) {
   x = messages.shift()
   messages.push(msg + '<br>');
   $("#clicksound")[0].play();
   $("#chatmessages").html(messages);
 }

  $("#chatform").submit(function() {

   <% if @ticket %>
   var uid = "<%= @ticket.uid %>";
   <% else %>
   var uid = null;
   <% end %>

   msg = $("#chattext").val();
   $("#chattext").val("");
   if ((uid != null) && (rtcc != null)) {
     appendsent(msg);
     rtcc.sendMessage(0, uid, msg);
   }
   else {
     appendsent("not ready to chat");
   }
   return false;
 })

 //
 // At intervals of 5 seconds, poll the ticket for progress
 //

 function ProgressManager(sel) {
   var that = this;

   this.startTime = new Date();
   this.timer = null;

   function pad(val) {
     var valString = val + "";
     if (valString.length < 2) {
       return "0" + valString;
     }
     else {
       return valString;
     }
   }

   function updateDisplay(progress) {
     var endTime = new Date();
     var timeDiff = endTime - that.startTime;
     var timeDiff = timeDiff/ 1000; // from ms to sec
     var seconds = Math.round(timeDiff % 60);
     var minutes = Math.floor( (timeDiff / 60) % 60);

     $(sel).html( pad(minutes) + ":" + pad(seconds) + " " + progress );
   }

   // Query the database and get the Progress field for this ticket

   function getProgress() {

     <% if @ticket %>

     $.ajax({
       type: "GET",
       url: "<%= ticket_path(:id => @ticket.id, :format => :json) %>",
       cache: false,
       dataType: "JSON"
     }).success(function(data) {
       updateDisplay(data["progress"]);
     }).error(function(e) {
       console.log(["Progress Error", e]);
     });

     <% end %>
   }

   function run() {
     getProgress();
     that.timer = setInterval(getProgress, 5000);
   }

   function stop() {
     if (that.timer != null) {
       clearInterval(that.timer);
       that.timer = null;
     }
   }

   // start it
   run();

   // exports
   this.stop = stop;
     
 }


 ////////////////////////////////////////////////////////////////
 //
 // This function is called at the 'call.create' event.  It serves
 // two purposes: to respond to the 'call.create' event, and to attach
 // the per-call handlers for the events of the call.
 //

 function defineCallListeners(call) {
   rtccCall = call; // set global var

   // Print all call-events for education purposes
   call.onAll(function() {
     if (window.console) {
       console.log('Call: event "' + this.eventName + '" with arguments: ' + JSON.stringify(arguments));
     }
   });

   // At the 'call.create' event, determine whether it is incoming or outgoing
   // and perform the appropriate logic.
   if (call.getDirection() == "incoming") {
     if (rtcc.getConnectionMode() == Rtcc.connectionModes.WEBRTC || rtcc.getConnectionMode() == Rtcc.connectionModes.PLUGIN) {
       var ans = confirm("Accept call from '" + call.dn + "'?");
       if (ans == true) {
         rtccCall.accept();
       }
       else {
         rtccCall.hangup();
       }
     }
   }

   // Install the Chrome screenshare extension if requested
   call.on('chrome.screenshare.missing', function(url) {
     if (window.location.protocol == "http:") {
       alert("Chrome screenshare requires an HTTPS connection");
     }
     else {
       answer = confirm("Click OK to download and install the Chrome Screenshare Extension");
       if (answer == true) {
         window.open(url);
       }
     }
   });

   call.on('terminate', function(reason) {

     // look for class rtccCallActive and mark disabled
     $(".rtccCallActive").attr("disabled", "disabled");
     $(".rtccHostActive").attr("disabled", "disabled");

     if (rtccRecording != null) {
       interruptRecording();
     }

     if (reason == 'not allowed') {
       alert("Call not allowed");
     }

     if (reason == 'rejected') {
       alert("Call rejected");
     }

     if (reason == 'not found') {
       alert("User not logged in");
     }

     if (reason == 'busy') {
       alert("User is busy");
     }
   });

   call.on('active', function() {
     <% if @ticket %>
     console.log(["CALLING TICKET", "<%= @ticket.uid %>"]);
     var greeting = "Hello there!  Would you like to begin a SightCall video chat?";
     rtcc.sendMessage(0, "<%= @ticket.uid %>", greeting);
     appendsent(greeting);
     // inviteFriend("<%= @ticket.uid %>")
     <% end %>
   });

   call.on('active', function() {
     // look for class rtccCallActive and mark enabled
     $(".rtccCallActive").removeAttr("disabled");
   });


 }
 
 ////////////////////////////////////////////////////////////////
 //
 // Initialize Real-Time Communication
 //

 function initializeRtcc(rtccAppId, token, displayName) {
   console.log(['initializeRtcc', rtccAppId, token, displayName]);
   var options = {
     debugLevel: 3,
     displayName: displayName,
     container: 'video-container'
     
   };
   rtcc = new Rtcc(rtccAppId, token, 'internal', options);

   // Print all events received for educational purposes
   rtcc.onAll(function() {
     if (window.console) {
       console.log('Rtcc: event "' + this.eventName + '" with arguments: ' + JSON.stringify(arguments));
     }
   });

   // The Client, Cloud and Presence Event Handlers report on the status of the RTCC connection,
   // when it is ready to make and receive calls, and when it is able to register for
   // Presence updates.

   rtcc.on('client.connect', function(mode) {
     $(".rtccConnectionStatus").attr("status", "connected");

     if (mode == Rtcc.connectionModes.DRIVER) {
       $(".rtccWebRTCControls").hide();
     }
   });

   rtcc.on('client.disconnect', function() {
     $(".rtccConnectionStatus").attr("status", "offline");
     $(".rtccConnectionActive").attr("disabled", "disabled");
     setTokenAndAuthenticate("/rtcc/callback");
   });

   rtcc.on('cloud.connect', function(mode) {
     $(".rtccConnectionStatus").attr("status", "connectedCloud");
   });

   rtcc.on('cloud.sip.ok', function() {
     $(".rtccConnectionStatus").attr("status", "sipOk");
     $(".rtccConnectionActive").removeAttr("disabled");

     <% if @ticket %>
     createMeetingPoint();
     <% end %>

   });

   rtcc.on('cloud.sip.ko', function() {
     $(".rtccConnectionStatus").attr("status", "offline");
     $(".rtccConnectionActive").attr("disabled", "disabled");
   });

   rtcc.on('cloud.drop', function() {
     $(".rtccConnectionStatus").attr("status", "alert");
     $(".rtccConnectionActive").attr("disabled", "disabled");
   });

   rtcc.on('cloud.loggedotheruser', function() {
     setTokenAndAuthenticate("/rtcc/callback");
   });

   rtcc.on('presence.newuser', function() {
     rtcc.setMyPresence(1);
   });

   rtcc.on('presence.ok', function() {
     rtcc.setMyPresence(1);
     launchPresence();
   });

   // The Call Event Handlers report on the status of the current call.
   // Both one-to-one calls and multiparty calls receive these updates.

   rtcc.on('call.create', defineCallListeners);


   // The MeetingPoint events handle updates about multiparty and
   // conference call functions.

   rtcc.on('meetingpoint.create.success', function(mph) {
     MPI = mph;                 // the object is the meeting point host
     MPI.autoaccept_mode();     // allow attendees to join with no confirmation
     MPI.host();                // start hosting the conference
   });

   rtcc.on('meetingpoint.host.success', function(mph) {
     $(".rtccHostActive").removeAttr("disabled");
   });

   // TOM: workaround
   rtcc.on('meetinpoint.host.success', function(mph) {
     $(".rtccHostActive").removeAttr("disabled");
   });

   rtcc.on('message.receive', function(msgid, uid, msg) {
     appendreceived(msg);
   });

   // Install the SightCall Driver?

   rtcc.on('driver.missing', function(downloadUrl) {
     var answer = confirm('Click OK to download and install the RTCC Client.');
     if (answer == true) {
       window.location = downloadUrl;
     }
   });

   // Install the SightCall Plugin?

   rtcc.on('plugin.missing', function(downloadUrl) {
     var answer = confirm('Click OK to download and install the RTCC Plugin.');
     if (answer == true) {
       window.location = downloadUrl;
     }
   });

   rtcc.initialize();
 }

 function createMeetingPoint() {
   var options = new Object();
   options.startDate = new Date();
   options.stopDate = new Date();
   options.location = "San Francisco";
   options.title = "teleportation";
   MPI = rtcc.createMeetingPoint('scheduled', options);
 }

 function inviteFriend(friendUid) {
   MPI.invite(friendUid)
 }

 function hangup() {
   // rtccCall.dropAllAttendees();
   rtccCall.hangup();
 }

 ////////////////////////////////////////////////////////////////
 //
 // Recording: Allocate a recording on the cloud recorder.  Upon creation, of an
 // start recording to the upload_url and begin an onscreen counter.
 //

 function newRecording() {

   var title = $("#recording_title").val();

   // Allocate a new recording on the cloud recorder
   rtccCloudrecorderManager.create(
     title,
     // success
     function(recording) {
       rtccRecording = recording;
       rtccCall.recordStart(recording.upload_url, 7);
       rtccRecordingCounter = new CounterManager("#recording_counter", "");
     },
     // failure
     function(e) {
       console.log(["newRecording: error", e]);
     }
   );
 }


 //
 // Recording: Stop the current recording, stop the counter.
 // Begin polling for movie files on the cloud-recorder
 //

 function stopRecording() {
   if (rtccCall != null) {
     rtccCall.recordStop();
     rtccRecordingCounter.stop(" stop");
     $("#recording_counter").html("recording stopped");
     pollForRecordingDetail(0);
   }
 }

 // Recording: format the URLs of the movie types the cloud-recorder
 // might return.
 
 function createWebmAndMp4Urls(data) {
   var webm_s3url = data["webm_s3url"];
   var mp4_s3url = data["mp4_s3url"];
   var vb_fileurl = data["vb_fileurl"];

   var result = "Movies: ";
   if (webm_s3url != null) {
     result = result + "<a href=\"" + webm_s3url + "\" target=_new> webm </a> ";
   }
   if (mp4_s3url != null) {
     result = result + "<a href=\"" + mp4_s3url + "\" target=_new> mp4 </a> ";
   }
   if (vb_fileurl != null) {
     result = result + "<a href=\"" + vb_fileurl + "\" target=_new> vb </a> ";
   }
     
   return result;
 }

 // Recording: Poll the cloud-recorder for status changes on the current recording.
 // Format a helpful message in the progress area.

 function pollForRecordingDetail(cnt) {
   if (cnt > 200) {
     // do not poll forever
     return;
   }

   rtccCloudrecorderManager.detail(
     rtccRecording,
     // success
     function(recording) {
       console.log(["poll recording", recording]);

       if (recording.status != "done") {
         setTimeout(function() { pollForRecordingDetail(cnt+1) }, 1000);
         $("#recording_results").html("Movies: <progress max=\"100\"></progress>");         
       }
       else {
         $("#recording_results").html(createWebmAndMp4Urls(recording));
       }
     },
     // failure
     function(e) {
       console.log(["RtccRecording Error", e]);
     }
   );
 }
     

 ////////////////////////////////////////////////////////////////
 //
 // Kick-off this application on page load
 //

 function documentReady() {

   progressManager = new ProgressManager("#progress-display")

   // Initialize the cloudrecorder manager with the URLs of the proxy for this ticket
   rtccCloudrecorderManager = new CloudrecorderManager(
     "<%= url_for :action => :newrecording %>",
     "<%= url_for :action => :recordingdetail %>"
   );

   <% if @ticket %>

   getToken(
     "/rtcc/callback",
     function(resp) {
        var token = resp.data;
       initializeRtcc(rtccAppId, token, "<%= current_user.name %>");
     }, function(e) {
       // the default prints it already
     });

   <% end %>
 }

 $(document).ready(documentReady);

</script>

