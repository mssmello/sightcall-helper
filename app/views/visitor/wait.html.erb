<div class="hero-unit">
  <h2> LigaLiga Video Help </h2>
  <div class="container well">
    <b>Status:</b> <span id="waiting-timer">00:00</span>
  </div>
</div>

<div class="container well rtccWebRTCControls" style="">
  <div id="video-container" style="width:322px; height:182px; background:#ffffff; border: 1px solid #AAAAAA;">
    <%= image_tag("SightCall_Logo.png", size: "320x180", style: "position:absolute") %>
  </div>
</div>

<div id="chatmessages" class="panel panel-default">
  (mensagens de chat ser√£o listadas aqui) <br>
  <br>
  <br>
  <br>
</div>
<form id="chatform" >
  <div class="input-group">
    <input id="chattext" type="text" class="form-control" placeholder="escreva aqui" />
    <span class="input-group-btn"> <button type="submit" class="btn btn-default"> Enviar </button> </span>
  </div>
</form>

<div class="col-sm-2 pull-right">
  <br>
  <button class="btn btn-large btn-primary" onclick="CloseMe();">Fechar Janela</button>
</div>

<%= audio_tag("Click03.mp3", id: 'clicksound', autoplay: true, controls: false) %>

<script>
 var rtccAppId = "<%= RTCC_APP_ID %>";
 var rtcc = null;
 var rtccCall = null;
 var MPI = null;
 var counterManager = null
 var originId = null;

 //
 // Functions for managing our little chat service
 //

 var messages = [ "<br>", "<br>", "<br>", "<br>" ];

 function appendSent(msg) {
   x = messages.shift()
   messages.push('<em>' + msg + '<em> <br>');
   $("#chatmessages").html(messages);
 }

 function appendReceived(msg) {
   x = messages.shift()
   messages.push(msg + '<br>');
   $("#clicksound")[0].play();
   $("#chatmessages").html(messages);
 }

  $("#chatform").submit(function() {
   msg = $("#chattext").val();
   $("#chattext").val("");
   if ((originId != null) && (rtcc != null)) {
     appendSent(msg);
     rtcc.sendMessage(0, originId, msg);
   }
   else {
     appendSent("not ready to chat");
   }
   return false;
 })


 //
 // get token
 //

 function getToken(url, uid, success, failure) {
   $.ajax({
     type: "POST",
     url: url,
     data: { uid: uid },
     cache: false,
     dataType: "JSON"
   }).success(function(data) {
     console.log(["RtccToken Success", data]);
     success(data);
   }).error(function(e) {
     console.log(["RtccToken error", e]);
     failure(e);
   });
 }

//
// getToken, set it and authenticate (again)
//

 function setTokenAndAuthenticate(url, uid) {
   getToken(
     url, uid,
     function(resp) {
       var token = resp.data;
       rtcc.setToken(token);
       rtcc.authenticate(1);
     }, function(e) {
       // the default prints it already
     });
 }

 function updateProgress(str) {
   $.ajax({
     type: "POST",
     url: "/visitor/update",
     data: { progress: str },
     cache: false,
     dataType: "JSON"
   }).success(function(data) {
     console.log(["UpdateProgress Success", str, data]);
   }).error(function(e) {
     console.log(["UpdateProgress error", e, str]);
   });
 }

 ////////////////////////////////////////////////////////////////
 //
 // This function is called at the 'call.create' event.  It serves
 // two purposes: to respond to the 'call.create' event, and to attach
 // the per-call handlers for the events of the call.
 //

 function defineCallListeners(call) {
   rtccCall = call; // set global var

   // Print all call-events for education purposes
   call.onAll(function() {
     if (window.console) {
       console.log('Call: event "' + this.eventName + '" with arguments: ' + JSON.stringify(arguments));
     }
   });

   // At the 'call.create' event, determine whether it is incoming or outgoing
   // and perform the appropriate logic.
   if (call.getDirection() == "incoming") {
     if (rtcc.getConnectionMode() == Rtcc.connectionModes.WEBRTC || rtcc.getConnectionMode() == Rtcc.connectionModes.PLUGIN) {
       var ans = confirm("Accept call from '" + call.dn + "'?");
       if (ans == true) {
         rtccCall.accept();
       }
       else {
         rtccCall.hangup();
       }
     }
   }

   // Install the Chrome screenshare extension if requested
   call.on('chrome.screenshare.missing', function(url) {
     if (window.location.protocol == "http:") {
       alert("Chrome screenshare requires an HTTPS connection");
     }
     else {
       answer = confirm("Click OK to download and install the Chrome Screenshare Extension");
       if (answer == true) {
         window.open(url);
       }
     }
   });

   call.on('terminate', function(reason) {

     // look for class rtccCallActive and mark disabled
     $(".rtccCallActive").attr("disabled", "disabled");
       updateProgress("call terminated");

     if (reason == 'not allowed') {
       alert("Call not allowed");
     }

     if (reason == 'rejected') {
       alert("Call rejected");
     }

     if (reason == 'not found') {
       alert("User not logged in");
     }

     if (reason == 'busy') {
       alert("User is busy");
     }
   });

   call.on('active', function() {
     // look for class rtccCallActive and mark enabled
     $(".rtccCallActive").removeAttr("disabled");
     updateProgress("call active");
   });
   
 }
 
 ////////////////////////////////////////////////////////////////
 //
 // Initialize Real-Time Communication
 //

 function initializeRtcc(weepAppId, token, displayName) {
   var options = {
     debugLevel: 3,
     displayName: displayName,
     container: 'video-container'
     
   };
   rtcc = new Rtcc(rtccAppId, token, 'internal', options);

   updateProgress("initializing");

   // Print all events received for educational purposes
   rtcc.onAll(function() {
     if (window.console) {
       console.log('Rtcc: event "' + this.eventName + '" with arguments: ' + JSON.stringify(arguments));
     }
   });

   // The Client, Cloud and Presence Event Handlers report on the status of the RTCC connection,
   // when it is ready to make and receive calls, and when it is able to register for
   // Presence updates.

   rtcc.on('client.connect', function(mode) {
     $(".rtccConnectionStatus").attr("status", "connected");

     if (mode == Rtcc.connectionModes.DRIVER) {
       $(".rtccWebRTCControls").hide();
     }
     updateProgress("connected");
   });

   rtcc.on('client.disconnect', function() {
     $(".rtccConnectionStatus").attr("status", "offline");
     $(".rtccConnectionActive").attr("disabled", "disabled");
     setTokenAndAuthenticate("/visitor/callback", "<%= @randomUid %>");
   });

   rtcc.on('cloud.connect', function(mode) {
     $(".rtccConnectionStatus").attr("status", "connectedCloud");
   });

   rtcc.on('cloud.sip.ok', function() {
     $(".rtccConnectionStatus").attr("status", "sipOk");
     $(".rtccConnectionActive").removeAttr("disabled");
     updateProgress("ready");
   });

   rtcc.on('cloud.sip.ko', function() {
     $(".rtccConnectionStatus").attr("status", "offline");
     $(".rtccConnectionActive").attr("disabled", "disabled");
     updateProgress("not ready");
   });

   rtcc.on('cloud.drop', function() {
     $(".rtccConnectionStatus").attr("status", "alert");
     $(".rtccConnectionActive").attr("disabled", "disabled");
     updateProgress("dropped");
   });

   rtcc.on('cloud.loggedotheruser', function() {
     setTokenAndAuthenticate("/visitor/callback", "<%= @randomUid %>");
   });

   rtcc.on('presence.newuser', function() {
     rtcc.setMyPresence(1);
   });

   rtcc.on('presence.ok', function() {
     rtcc.setMyPresence(1);
   });

   // The Call Event Handlers report on the status of the current call.
   // Both one-to-one calls and multiparty calls receive these updates.

   rtcc.on('call.create', defineCallListeners);


   rtcc.on('meetingpoint.attendee.invite', function(mpa) {

     MPI = mpa;       // the object is the meeting point
       
     counterManager.stop(" Connected.");

     var ans = confirm("Accept call from '" + MPI.hostDisplayName + "'?");
     if (ans == true) {
       updateProgress("invitation accepted");
       MPI.accept();
     }
     else {
       updateProgress("invitation denied");
       MPI.deny();
     }
   });

   rtcc.on('message.receive', function(msgid, uid, msg) {
     if (originId == null) {
       counterManager.stop(" Connected.");
       originId = uid; // set global
     }
     appendReceived(msg);
   });

   // Install the SightCall Driver?

   rtcc.on('driver.missing', function(downloadUrl) {
     var answer = confirm('Click OK to download and install the RTCC Client.');
     if (answer == true) {
       window.location = downloadUrl;
     }
   });

   // Install the SightCall Plugin?

   rtcc.on('plugin.missing', function(downloadUrl) {
     var answer = confirm('Click OK to download and install the RTCC Plugin.');
     if (answer == true) {
       window.location = downloadUrl;
     }
   });

   rtcc.initialize();
 }

 function CloseMe() {
   window.close(); // for popup window
   if (parent != null && typeof(parent) != 'undefined') {
     parent.jQuery.colorbox.close();  // for iframe colorbox
   }
 }


 ////////////////////////////////////////////////////////////////
 //
 // Kick-off this application on page load
 //

 function documentReady() {

   counterManager = new CounterManager("#waiting-timer", " Connecting to Agent ...");

   getToken(
     "/visitor/callback",
     "<%= @randomUid %>",
     function(resp) {
       var token = resp.data;
       initializeRtcc(rtccAppId, token, "Visitor-<%= @randomUid %>");
     }, function(e) {
       // the default prints it already
     });
   
   $(window).on('beforeunload', function() {
     updateProgress("departed");
     return "Leaving SightTicket page"
   });

   // This is too late to POST
   $(window).on('unload', function() {
     updateProgress("unloaded");
     return "Leaving SightTicket page"
   });

   console.log(["WINDOW", window]);

   // Confusion: Receive a message from our parent frame
   $(window).on('message'), function(e) {
     console.log(["window.on(message)", e]);
     updateProgress("iframe listener exit");
   }

   // Failed: this doesn't work either
   window.addEventListener('onmessage', function(e) {
     console.log(["onmessage listener", "thing"]);
     updateProgress("iframe listener exit");
   }, false);

   // Success: this seems to work in Chrome
   window.addEventListener('message', function(e) {
     console.log(["message listener", "thing"]);
     updateProgress("iframe listener exit");
   }, false);
 }

 $(document).ready(documentReady);

</script>




